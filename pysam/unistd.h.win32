#ifndef UNISTD_H
#define UNISTD_H

#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS 1
#endif

#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#endif

#include <string.h>
#include <io.h>
#include <math.h>

#include "Gamma.h"

#define lgamma LogGamma

#define __func__ __FUNCTION__

#define open _open

 ///////////////////////////////////////////////////////////////////////////////
 // XGetopt.h  Version 1.2
 //
 // Author:  Hans Dietrich
 //          hdietrich2@hotmail.com
 //
 // This software is released into the public domain.
 // You are free to use it in any way you like.
 //
 // This software is provided "as is" with no expressed
 // or implied warranty.  I accept no liability for any
 // damage or loss of business that this software may cause.
 //
 ///////////////////////////////////////////////////////////////////////////////

static int optind, opterr;
static char *optarg;
 
static int getopt(int argc, char *argv[], char *optstring)
{
    char c;
    char *cp;
    static char *next = NULL;
    if (optind == 0)
        next = NULL;

    optarg = NULL;

    if (next == NULL || *next == '\0')
    {
        if (optind == 0)
            optind++;

        if (optind >= argc || argv[optind][0] != '-' || argv[optind][1] == '\0')
        {
            optarg = NULL;
            if (optind < argc)
                optarg = argv[optind];
            return EOF;
        }

        if (strcmp(argv[optind], "--") == 0)
        {
            optind++;
            optarg = NULL;
            if (optind < argc)
                optarg = argv[optind];
            return EOF;
        }

        next = argv[optind];
        next++;     // skip past -
        optind++;
    }

    c = *next++;
    cp = strchr(optstring, c);

    if (cp == NULL || c == ':')
        return '?';

    cp++;
    if (*cp == ':')
    {
        if (*next != '\0')
        {
            optarg = next;
            next = NULL;
        }
        else if (optind < argc)
        {
            optarg = argv[optind];
            optind++;
        }
        else
        {
            return '?';
        }
    }

    return c;
}


#endif // UNISTD_H
